name: CI/CD Pipeline

on:
  workflow_dispatch:
  # # Adicionar gatilho para push em projetos reais
  # push:
  #   branches: [ main ]
  # # Adicionar gatilho para pull_request em projetos reais
  # pull_request:
  #   branches: [ main ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_nitapi_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/local.txt

    - name: Set up environment variables
      run: |
        cp .envs/.local/.django.example .envs/.local/.django
        cp .envs/.local/.postgres.example .envs/.local/.postgres
        echo "DATABASE_URL=postgres://postgres:postgres@localhost:5432/test_nitapi_db" >> .envs/.local/.django
        echo "REDIS_URL=redis://localhost:6379/0" >> .envs/.local/.django

    - name: Run migrations
      run: python manage.py migrate

    - name: Run tests
      run: |
        coverage run --source='.' manage.py test
        coverage report --fail-under=80
        coverage xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pre-commit

    - name: Run pre-commit hooks
      run: |
        pre-commit install
        pre-commit run --all-files

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Get version
      id: get_version
      run: |
        VERSION=$(cat VERSION 2>/dev/null || echo "1.0.0")
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "SHORT_SHA=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/local/django/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/nitapi-api:latest
          ${{ secrets.DOCKER_USERNAME }}/nitapi-api:${{ steps.get_version.outputs.VERSION }}
          ${{ secrets.DOCKER_USERNAME }}/nitapi-api:${{ steps.get_version.outputs.SHORT_SHA }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to production
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          cd ${{ secrets.PROJECT_PATH }}
          docker-compose pull
          docker-compose up -d --force-recreate
          docker system prune -f
          
          # Run migrations
          docker-compose exec -T api python manage.py migrate
          
          # Collect static files
          docker-compose exec -T api python manage.py collectstatic --noinput
          
          # Health check
          sleep 30
          curl -f http://localhost:8000/health/ || exit 1
          
          echo "âœ… Deploy completed successfully!"
